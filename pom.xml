<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.ttzv.item</groupId>
    <artifactId>ITem</artifactId>
    <packaging>jar</packaging>
    <version>0.5</version>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>13</java.version>
        <javafx.version>13</javafx.version>
        <maven.compiler.release>11</maven.compiler.release>
        <update4j.confighandler.class>com.ttzv.item.ConfigHandler</update4j.confighandler.class>
        <jackson.version>2.10.0</jackson.version>
    </properties>

    <repositories>

        <repository>
            <!-- DO NOT set id to "local" because it is reserved by Maven -->
            <id>lib</id>
            <url>file://${project.basedir}/lib</url>
        </repository>

        <!-- SMSAPI repository configuration -->
        <repository>
            <releases>
                <enabled>true</enabled>
                <updatePolicy>always</updatePolicy>
                <checksumPolicy>fail</checksumPolicy>
            </releases>
            <id>smsapi</id>
            <name>smsapi</name>
            <url>http://labs.smsapi.com/maven/</url>
            <layout>default</layout>
        </repository>

    </repositories>

    <dependencies>

        <!-- https://mvnrepository.com/artifact/org.openjfx/javafx-base -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-base</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.openjfx/javafx-graphics -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-graphics</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.openjfx/javafx-fxml -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.openjfx/javafx-web -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-web</artifactId>
            <version>${javafx.version}</version>
        </dependency>


        <!-- This actually uses locally downloaded jar in custom maven repository that was patched to contain module-info.java required by jlink
            Same goes for jakarta.activation, it'll stay like this until both libraries become modular-->
        <dependency>
            <groupId>com.mylib</groupId>
            <artifactId>jakartamail-patched</artifactId>
            <version>1.6.4</version>
        </dependency>

        <dependency>
            <groupId>com.mylib</groupId>
            <artifactId>jakartaactivation-patched</artifactId>
            <version>1.2.1</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.postgresql/postgresql -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>42.2.8</version>
        </dependency>

        <!-- Autoupdater framework - Update4j -->
        <dependency>
            <groupId>org.update4j</groupId>
            <artifactId>update4j</artifactId>
            <version>1.4.4</version>
        </dependency>

        <!--        Local jars-->
        <dependency>
            <groupId>ttzv.uiUtils</groupId>
            <artifactId>JavaFX_Customs</artifactId>
            <version>0.0.1</version>
        </dependency>

        <dependency>
            <groupId>ttzv.propsicl</groupId>
            <artifactId>propsicl</artifactId>
            <version>0.1</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.10.0</version>
        </dependency>

        <!-- SMSAPI -->
        <dependency>
            <groupId>pl.smsapi</groupId>
            <artifactId>smsapi-lib</artifactId>
            <version>2.4</version>
        </dependency>


    </dependencies>

    <build>
        <plugins>
            <!-- Add javafx maven plugin for convenient javafx support -->
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.3</version>
                <configuration>
                    <release>${maven.compiler.release}</release>
                    <jlinkImageName>ITem_image</jlinkImageName>
                    <launcher>launcher</launcher>
                    <mainClass>com.ttzv.item.Main</mainClass>
                </configuration>
            </plugin>


            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <release>${maven.compiler.release}</release>
                </configuration>
            </plugin>

            <!--Copy non-transitive dependencies to deploy folder for update4j Configuration -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.1.1</version>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/deploy/files</outputDirectory>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>false</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                            <excludeTransitive>false</excludeTransitive>
                            <excludeArtifactIds>update4j</excludeArtifactIds>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.1.2</version>
                <configuration>
                    <outputDirectory>${project.build.directory}/deploy/files/</outputDirectory>
                </configuration>

            </plugin>

            <!--Maven exec plugin for quick building new config .xml or syncing existing ones
            Usage:
            mvn exec:java@sync to sync existing - created on package
            mvn exec:java@new for new config-->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.6.0</version>
                <executions>
                    <execution>
                        <id>new</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>${update4j.confighandler.class}</mainClass>
                            <arguments>
                                <argument>--new</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>sync</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>${update4j.confighandler.class}</mainClass>
                            <arguments>
                                <argument>--sync</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>
</project>